{
    "contents" : "---\ntitle       : Shiny\nsubtitle    : Data Products\nauthor      : Brian Caffo, Jeff Leek, Roger Peng\njob         : Johns Hopkins Bloomberg School of Public Health\nlogo        : bloomberg_shield.png\nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : tomorrow      # \nurl:\n    lib: ../../librariesNew\n    assets: ../../assets\nwidgets     : [mathjax]            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\n---\n\n## What is Shiny?\n\n- Shiny is a platform for creating interactive R programs embedded into a web page.\n- Suppose that you create a prediction algorithm, with shiny you can *very easily* create web input form that calls R and thus your prediction algorithm and displays the results.\n- Using Shiny, the time to create simple, yet powerful, web-based interactive data products in R is minimized.\n  - However, it lacks the flexibility of full featured (and more complex) solutions.\n- Shiny is made by the fine folks at R Studio.\n\n---\n## Some mild prerequisites \n- Shiny doesn't really require it, but as with all web programming, a little knowledge of html, css and js is very helpful\n  - html gives a web page structure and sectioning as well as markup instructions\n  - css gives the style\n  - js for interactivity\n- There are too many tutorials online to count for getting basic proficiency in these topics to count. \n- Shiny uses [bootstrap](http://getbootstrap.com/) (no relation to the statistics bootstrap) style, which (to me) seems to look nice and renders well on mobile platforms\n\n---\n## What else is out there?\n- Creating any solution requiring fairly deep knowledge of web client/server programming\n- [OpenCPU](https://public.opencpu.org/) by Jerome Ooms, is a really neat project providing an API for calling R from web documents\n  - And he even hosts an OpenCPU server, but you can create your own\n\n---\n## Context\n- You created a novel prediction algorithm to predict risk for developing\n  diabetes.\n    - You're hoping patients and caregivers will be able to enter their data and, if needed, take preventative measures.\n- You want to create a web site so that users can input the relevant predictors and obtain their prediction.\n- Your prediction algorithm (ok, so you're not going to be saving the world with this one)\n  - [link for a real prediction score](http://www.ncbi.nlm.nih.gov/pubmed/12610029)\n```{r}\ndiabetesRisk <- function(glucose) glucose / 200\n```\n\n\n---\n## Getting started\n- Make sure you have the latest release of R installed\n- If on windows, make sure that you have Rtools installed\n- `install.packages(\"shiny\")`\n- `libray(shiny)`\n- Great tutorial at \n[http://rstudio.github.io/shiny/tutorial/](http://rstudio.github.io/shiny/tutorial/)\n- Basically, this lecture is walking through that tutorial offering some of our insights\n- Note, some of the proposed interactive plotting uses of Shiny could be handled by the very simple `manipulate` function [rstudio manipulate](http://www.rstudio.com/ide/docs/advanced/manipulate)\n- Also, `rCharts` is will be covered in a different lecture.\n\n---\n## A Shiny project\n- A shiny project is a directory containing at least two parts\n  - One named ui.R (for user interface) controls how it looks.\n  - One named server.R that controls what it does.\n\n---\n## ui.R\n```\nlibrary(shiny)\nshinyUI(pageWithSidebar(\n  headerPanel(\"Data science FTW!\"),\n  sidebarPanel(\n    h3('Sidebar text')\n  ),\n  mainPanel(\n      h3('Main Panel text')\n  )\n))\n```\n\n---\n## server.r\n```\nlibrary(shiny)\nshinyServer(\n  function(input, output) {\n  }\n)\n```\n\n---\n## To run it\n- In R, change to the directories with these files and type `runApp()`\n- or put the path to the directory as an argument\n- It should open an browser window with the app running\n\n---\n![simplestApp](fig/simplestApp.png \"First Shiny app\")\n\n---\n## R functions for HTML markup\n`ui.R`\n```\nshinyUI(pageWithSidebar(\n  headerPanel(\"Illustrating markup\"),\n  sidebarPanel(\n      h1('Sidebar panel'),\n      h1('H1 text'),\n      h2('H2 Text'),\n      h3('H3 Text'),\n      h4('H4 Text')\n      \n  ),\n  mainPanel(\n      h3('Main Panel text'),\n      code('some code'),\n      p('some ordinary text')\n  )\n))\n\n```\n\n---\n![markup](fig/markup.png 'Markup in ui.R')\n\n\n---\n## Illustrating inputs ui.R\n```\nshinyUI(pageWithSidebar(\n  headerPanel(\"Illustrating inputs\"),\n  sidebarPanel(\n    numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),\n    checkboxGroupInput(\"id2\", \"Checkbox\",\n                   c(\"Value 1\" = \"1\",\n                     \"Value 2\" = \"2\",\n                     \"Value 3\" = \"3\")),\n    dateInput(\"date\", \"Date:\")  \n  ),\n  mainPanel(\n      \n  )\n))\n```\n\n---\n![inputs](fig/inputs.png \"Showing inputs\")\n\n---\n## Part of ui.R\n```\n  mainPanel(\n        h3('Illustrating outputs'),\n        h4('You entered'),\n        verbatimTextOutput(\"oid1\"),\n        h4('You entered'),\n        verbatimTextOutput(\"oid2\"),\n        h4('You entered'),\n        verbatimTextOutput(\"odate\")\n  )\n```\n\n---\n## server.R\n```\nshinyServer(\n  function(input, output) {\n    output$oid1 <- renderPrint({input$id1})\n    output$oid2 <- renderPrint({input$id2})\n    output$odate <- renderPrint({input$date})\n  }\n)\n```\n\n---\n![outputs](fig/inputsOutputs.png \"Showing outputs\")\n\n---\n## Let's build our prediction function\n\n---\n## \n```\nshinyUI(\n  pageWithSidebar(\n    # Application title\n    headerPanel(\"Diabetes prediction\"),\n  \n    sidebarPanel(\n      numericInput('glucose', 'Glucose mg/dl', 90, min = 50, max = 200, step = 5),\n      submitButton('Submit')\n    ),\n    mainPanel(\n        h3('Results of prediction'),\n        h4('You entered'),\n        verbatimTextOutput(\"inputValue\"),\n        h4('Which resulted in a prediction of '),\n        verbatimTextOutput(\"prediction\")\n    )\n  )\n)\n```\n\n---\n## server.R\n```\ndiabetesRisk <- function(glucose) glucose / 200\n\nshinyServer(\n  function(input, output) {\n    output$inputValue <- renderPrint({input$glucose})\n    output$prediction <- renderPrint({diabetesRisk(input$glucose)})\n  }\n)\n```\n\n---\n## The result\n![prediction model](fig/predictionApp.png \"prediction app\")\n\n---\n## Image example\n- Let's build an example with an image\n- How about we create a histogram of data\n- Put a slider on so that the user has to guess the mean\n\n---\n## ui.R\n```\nshinyUI(pageWithSidebar(\n  headerPanel(\"Example plot\"),\n  sidebarPanel(\n    sliderInput('mu', 'Guess at the mean',value = 70, min = 62, max = 74, step = 0.05,)\n  ),\n  mainPanel(\n    plotOutput('newHist')\n  )\n))\n```\n\n---\n## server.R\n```\nlibrary(UsingR)\ndata(galton)\n\nshinyServer(\n  function(input, output) {\n    output$newHist <- renderPlot({\n      hist(galton$child, xlab='child height', col='lightblue',main='Histogram')\n      mu <- input$mu\n      lines(c(mu, mu), c(0, 200),col=\"red\",lwd=5)\n      mse <- mean((galton$child - mu)^2)\n      text(63, 150, paste(\"mu = \", mu))\n      text(63, 140, paste(\"MSE = \", round(mse, 2)))\n      })\n    \n  }\n)\n```\n\n---\n## The output\n<img src=\"fig/examplePlot.png\" style=\"width: 900px;\"/>\n\n---\n## Tighter control over style\n- All of the style elements are handled through ui.R\n- Instead, you can create a www directory and then an index.html file in that directory\n  - [This link](http://rstudio.github.io/shiny/tutorial/#html-ui) goes through the html needed\n  - You just have to have specific js libraries and appropriately name ids and classes. This is beyond the scope of this class\n  - For students with a lot of experience in html, js, css it would be a breeze and probably easier and more flexible than the R html controls in ui.R\n\n---\n## Other things Shiny can do\n- Allow users to upload or download files\n- Have tabbed main panels\n- Have editable data tables\n- Have a dynamic UI\n- User defined inputs and outputs \n- Put a submit button so that Shiny only executes complex code after user hits submit\n\n\n---\n## Distributing a Shiny app\n- The quickest way is to send (or put on github or gist or dropbox or whatever) someone the app directory and they can then call `runApp`\n- You could create an R package and create a wrapper that calls `runApp`  \n  - Of course, these solutions only work if the user knows R\n- Another option is to run a shiny server\n  - Requires setting up a (Shiny server)[http://www.rstudio.com/shiny/server/]\n    - Probably easiest if you use one of the virtual machines where they already have Shiny servers running well (for example, on AWS)\n  - Setting up a Shiny server is beyond the scope of this class as it involves some amount of linux server administration\n  - Groups are creating a Shiny hosting services that will presumably eventually be a fee for service or freemium service\n  - BTW, don't put system calls in your code (this is one of the first things many of us do for fun, but it introduces security concerns)\n\n",
    "created" : 1403563732327.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1636158829",
    "id" : "5A60168B",
    "lastKnownWriteTime" : 1399667415,
    "path" : "~/Documents/coursera/DataScience/09_DevelopingDataProducts/shiny/index.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}